Backend Developer

1. API Design
   ∟ Rest API
   ∟ GraphQL
   ∟ gRPC
   ∟ Web Socket
   ∟ Message Broker(communication with 2 API)
2. API Security
   ∟ JWT Token
   ∟ Refresh Token (Highly used large application)
   ∟ OAuth2(social login(Login with google, facebook, etc))
   ∟ SAML(Single sign on)
   ∟ Identity Provider(Cognito, Oauth0, etc)
   ∟ Role based Authorization
3. API Testing
   ∟ Unit Testing
   ∟ Acceptance Testing
   ∟ Load Testing
4. Documentation
   ∟ Swagger
   ∟ Postman
5. Database(ORM)
   ∟ NoSQL
      ∟ MongoDB
      ∟ AWS DynamoDB
   ∟ SQL
      ∟ PostgreSQL
      ∟ MySql
   ∟ In Memory
      ∟ Redis
      ∟ Mem Cashed
   ∟ Graph Database
      ∟ Neo4j
6. Linux Server
7. Cloud Computing
8. DevOps



Server Apllication Responsiblity
 - Listen request
 - Process
    ∟ Algorithm
    ∟ Data Structure
    ∟ Database
    ∟ Problem solving
 - Response

HTTP (Stateless communication - if i req on server after server res communication disconnected)
- Method
 ∟ GET
 ∟ POST
 ∟ PUT/PATCH
 ∟ DELETE
-Header

Routing Patterns
- GET
  ∟ Get all ('/')
  ∟ Get with filter ('/:id)
- POST
  ∟ Create
- UPDATE
  ∟ Update with id ('/:id')
- DELETE
  ∟ Delete by id ('/:')

Request => Middleware[Logger, body parser, user ip, block ip, authentication, authorization, validation] => Controller => Middleware[Error handler] => Response

Server application development
 - Express
 - NodeJS Loggers
 - NodeJS File Uploads
 - NodeJS Emails
 - NodeJS Clean Architecture
 - NodeJS Caching Techniques
 - NodeJS Jobs Schedular
 - NodeJS Message Queues
 - NodeJS Realtime Application
 - NodeJS Testing
 - NodeJS Design
 - NodeJS CI/CD Pipeline

Multi Page Application
 - NodeJS Template Engine
 - Session Based Authentication

Rest API
 - Rest API
 - API Validation
 - API Security - Bearer Token
 - API Security - Refresh Token
 - Rest API Design & Management
 - Acceptance Testing
 - Postman 
 - API Security - OAuth2
 - API Security - MFA & SSO
 - API Security - Oauth0
 - Role Based Access Control

CMS
 - Strapi CMS
 - Strapi CMS Development

Database Courses
 - SQL
   - PostgreSQL
   - Sequalize
   - TypeORM
   - Prisma 2
   - Redis
   - SQL
   - SQL Database Design
   - SQL Join
   - SQL Transactions
 - NoSQL
   - MongoDB
   - Mongoose
   - MongoDB Data Modeling
   - MongoDB - Aggregation
   - MongoDB - Transactions
   - MongoDB - Performance Optimization
   - MongoDB - Security
   - MongoDB - Administration
   - MongoDB - Atlas
   - MongoDB - Realm


----- Inside the Backend Development ----
What is Backend?
How does the computer help us?
We need to store information: Using FS or DB, end of the day all data store in FS(like: .txt, .json, .png, .js)
Problems with File System
  - File system is very slow
  - Difficult to access
  - Limited Structure   
  - NOT scalable for large valume of data
  - No pre processing
  - No search
  - And a lot of ther problems
Database: Smart people address all these issues and devloped database to store all kinds of information that is easy to access.(we can directly access to db to store and retrive information)
Drawbacks of Database: 
  - Lack of security
  - Lack of permissions
  - No custom business logic
  - No validation
Business Logic:
  - it's not client mistake
  - it's mistake by our business application layer (wrong business logic code)
  - Adding application large on top of database
  - User will commnicate with database via application
  - So that we can have control over their access
  - Also validate data before inserting.
Drawbacks of Business Logic
  - There is no visual layer (they run script(terminal))
  - No dynamic content
  - Only prewritten script
User Interface Layer:
  - User -> user interface layer -> application/business logic layer -> database
  - Adding extra layer for user
  - User can see and intract with the data
  - Dynamic content
Package & Ship:
  - Traditional software package 
  - Intregated all components
  - Easy to ship 
  - Everything lives in clients machine
  - No centralized and distributed solution
Software Distribution Media:
  - Distribution with (CD rom, Flash Drive, Hard disk)
Internet Borns: We no need to CD, Flash disk, etc
Difference between web & normal application:
  - We need to find a diffrent solution
  - We need a central database that can be access by all users
  - So that every user can access the same data
Communication between client & server:
  - Networking
Networking:
  - Dont need when normal application
  - When build web application then we need to networking
  - web application connect each other through network
Networking Concepts
  - IP address
  - DNS( Domain name system) 
  - Protocol
  - Packet
  - Buffer
  - SSL/TLS
DNS (Domain Name System)
  - example when we call any person, we called by name but behind connect with number, same as DNS and IP
  - All outside request handle web server, web server connect with web application
  - Client hit domain name -> DNS check and forward connected IP -> web server get request from client(outside) -> web server connect with web application -> inside web application have business logic/DB access -> after validation -> return response same way. 
Topic list for deep dive into server:
  - 
Concepts to become a backend developer
  - Web server application
  - Application (Business logic, programming, DSA, Design principal implemnet)
  - Database (Store application data)
  - Server (worked with req, res)
Web Server:
  - A web ser is computer software and underlying hardware that accepts requests via HTTP or its secure variant HTTPs
Web Server Responsibilities
  - Handling HTTP requests
  - Serving static files
  - Processing dynamic contents
  - Load balancing and reverse proxy
  - Logging & monitoring
Backend Application:
  - Request -> understand the req then generate res[validation/security, business logic/other service/database, process response]<- Response
  - req have many type 
       -> login/signup
       -> crop image
       -> file convert
       -> store date into DB
       -> json to html file convert
       -> request have body,method,header
       -> send emails
       -> db date give in xl
       -> send invoice to email
       -> notify me
       -> Types of response:
            - text
            - xml
            - json
            - files
Main Responsibilities of Backend Application:
  - Authentication/Authorization
  - Validation
  - Database access(fetch, insert, update, join, aggrefate, table create)
  - Synchronous communication
      - communicate with other service (fetch image, get pdf using url)
  - Asynchronous communication
      - schedule message (messageQ,Schedular) corn job - perticular work mentioned time
  - CRUD operations
  - Generate final response
Database:
  - SQL
      - Schema: Structured schema with predefined structure.
      - Scalability: Generally vertically scalable.
  - NoSQL
      - Schema: There is no fixed schema, meaning data can be stored without predefined structure or schema.
      - Scalability: Horizontally scalable, easier to scale out
Server
  - Server Administration
  - Linux commands
  - DNS configurations
  - SSL/TLS
Objective of backend developer
  - Response to a request
  - Understand the request
  - Do whatever it requires to send a response

We have problems in diffrent phases
  - Development -> Deployment -> Distribution
Application architecture
  - Monolithic (mvc/ all codebase in one folder)
  - N-tier (use microframework(graphQL,API server) multiple tier application divide(backend, frontent, database))
  - Modular monolith (mvc but brake with diffrent service)
  - Microservice (diffrent service application)
  - Event driven (create messaing service)
  - Cloud native (if we deside will run on cloud)
  - Serverless

High performace code
  - Problem solving
       - Data structure
       - Algorithms
  - Engineering
       - Design pattern (27 Patterns)
       - Design principal
       - Schema optimization
       - Query optimization
       - Scalable code
  - Testing
       - Testing

State:
  - Stateless: not used any file system, not session store 
  - Statefull: store in code

Cloud Computin:
   - Linux
   - SSH
   - Compute/VM
   - Storage
   - Database
   - Networking
   - VPC (Compute/VM, Storage, Database, Networking)

DevOps:
Development => DevOps => Deployment

General process:
  - write code
  - test the code locally
  - push to github
  - pull the code on the server
  - build 
  - deploy 
  - monitor

DevOps process:
  - write code
  - push to github
  - test automatically on the intregration server
  - build the code and generate final version of code intregate on server
  - monitor

Non functional requirements
 - System design:
    - performace
    - Scalability
    - Reliablity
    - Security

Common system design concepts
   - Application architecture
   - computer network
       - OSI (Open system interconnection) model
   - Synchronous/Asynchronous communication between services
       - Synchronous: (Rest API, gRPC, GraphQL)
       - Asynchronous: came request then quick send response rest of task forward to schedule/message broker (Event driven architecture)
   - Caching and CDN
   - Scaling database
   - fault tolerance, failures and disaster recovery