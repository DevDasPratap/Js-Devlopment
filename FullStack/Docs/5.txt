Array Operations

Imperative traverse
Declarative traverse
Update
Delete
Mutation
Map
Filter
Reduce
Object Deep Drive

Object Operations
Function vs Method
Object as a Data Structure

Array Operations
Object Over Array


Array Operations - Imperative vs Declarative

Imperative traverse

const numbers = [2, 5, 6, 7, 89, 100];

let sum = 0;
for (let i = 0; i < numbers.length; i++) {
	// console.log(numbers[i] * 2);
	sum += numbers[i];
}
console.log(sum);

let arr2 = [1, 2, 3, null, false, 6];

count = 0;
for (let i = 0; i < arr2.length; i++) {
	for (let j = i; j < arr2.length - 1; j++) {
		if (!arr2[j] || typeof arr2[j] !== 'number') {
			arr2[j] = arr2[j + 1];
			arr2[j + 1] = undefined;
		}
	}

	if (arr2[i] == undefined) {
		count++;
	}
}
arr2.length -= count;
console.log(count, arr2);



Declerative way [Built in method]

// Travers
let arr20 = [1, 2, 3, 4];
arr20.forEach((value, index, arr) => {
	console.log(`index:${index} value:${value} Array:${arr}`);
});

// Update
const arr = [
	{ id: 1, value: 10 },
	{ id: 2, value: 20 },
	{ id: 3, value: 30 },
	{ id: 4, value: 40 },
	{ id: 5, value: 50 },
];

const obj2 = arr[2];
obj2.value = 300;
console.log(obj2);

/* const index = arr.findIndex(function (val) {
	return val.id === 4;
});

arr[index].value = 400;

console.log(arr); */


find() Method Mutable Way
const obj = arr.find(function (val) {
	return val.id === 4;
});

obj.value = 400;
console.log(obj);

//Delete
const arr5 = [
	{ id: 1, value: 10 },
	{ id: 2, value: 20 },
	{ id: 3, value: 30 },
	{ id: 4, value: 40 },
	{ id: 5, value: 50 },
];

// splice -> mutable
const index = arr5.findIndex((item) => item.id === 4);
const arr1 = arr5.splice(index, 1); //একটা item Delete হয়ে যাবে
console.log(arr5);


Mutation

Map

Filter

Reduce

Deep copy vs Shallow copy
Function vs Method

Brief discussion on Prototype

Object as a Data Structure

Array Operations
Object Over Array
Multi Dimensional Array


Array Operations

Imperative traverse

If we are asked to traverse an array, we can easily execute a loop to traverse it. Now the question may come what is traverse. Traverse is Suppose we can touch each element of an array by running a loop and touch the required operation, it is called traverse. For example:
const numbers = [2, 5, 6, 7, 89, 100];

for (let i = 0; i < numbers.length; i++) {
	console.log(numbers[i]);
}

We can print out all the elements of the numbers array like this. We can also multiply each element by 2 and show the output if we want.

const numbers = [2, 5, 6, 7, 89, 100];

for (let i = 0; i < numbers.length; i++) {
	console.log(numbers[i] * 2);
}

Now if we want to find the sum of all the elements we can.

const numbers = [2, 5, 6, 7, 89, 100];

let sum = 0;
for (let i = 0; i < numbers.length; i++) {
	sum += numbers[i];
}

console.log(sum);

This is called Imperative Traversing. Because we have told where the loop will start, where it will stop, and even how to increment. I have also told what the operation will be. So it is an Imperative Traversing.



Declarative traverse

Usually we don't need to work in JavaScript by running for loops. Since JavaScript is a high-level language, it has various methods, which we can traverse in a declarative way. What are functions and methods we will know later. If going the declarative way as we did imperative traversal, there is a nice method called forEach. We try to understand this method a little.
const numbers = [2, 5, 6, 7, 89, 100];

numbers.forEach(function () {
	console.log('Hello World');
});


Update
There is no need to do the update in the imperative way. Update is very simple. If we know the index of an array then we can easily update its data. such as
const arr = [1, 2, 3, 4, 5];

arr[3] = 300;

console.log(arr); // [1, 2, 3, 300, 5]

Now if the index is not known then the index must be extracted first. Then it can be updated. such as
const arr = [
	{ id: 1, value: 10 },
	{ id: 2, value: 20 },
	{ id: 3, value: 30 },
	{ id: 4, value: 40 },
	{ id: 5, value: 50 },
];

const index = arr.findIndex((item) => item.id === 4);
arr[index].value = 400;

console.log(arr);

It can be updated without retrieving the index. In that case we have to use find method. such as
const arr = [
	{ id: 1, value: 10 },
	{ id: 2, value: 20 },
	{ id: 3, value: 30 },
	{ id: 4, value: 40 },
	{ id: 5, value: 50 },
];

const obj = arr.find((val) => val.id === 4);
obj.value = 400;

console.log(obj); // { id: 4, value: 400 }
console.log(arr);


Delete
Now we will see how to delete a data from an array. We have already seen how to delete data in the imperative way in the array traversal example. Here we will delete using two methods. splice and filter. The difference between them is that splice method is mutable and filter is immutable. Let's see how.
const arr = [
	{ id: 1, value: 10 },
	{ id: 2, value: 20 },
	{ id: 3, value: 30 },
	{ id: 4, value: 40 },
	{ id: 5, value: 50 },
];

const index = arr.findIndex((item) => item.id === 4);
const arr1 = arr.splice(index, 1);

console.log(arr1); // [ { id: 4, value: 40 } ]
console.log(arr);

Here it is seen that the splice method has directly deleted the data from the original array. That means there is a mutation here.

const arr = [
	{ id: 1, value: 10 },
	{ id: 2, value: 20 },
	{ id: 3, value: 30 },
	{ id: 4, value: 40 },
	{ id: 5, value: 50 },
];

const arr2 = arr.filter((item) => item.id !== 4);

console.log(arr2);
console.log(arr);


Here is the original array as it was. But after filtering the filter method returns a new array which doesn't contain the one I wanted to delete. That means the filter method is immutable.

Mutation
Mutation has already been discussed. I hope everyone understands this.

Map
Map usually creates a clone version of the original array. If the original array contains 10 data then the new array will also contain 10 data. Now that data can be same or different. such as
const numbers = [1, 2, 3, 4];
const strs = numbers.map((v) => v.toString());
console.log(strs);

It will output the string version of all numbers. One thing to keep in mind is that the length of the array will not change after mapping. Only the data will change. The number of data will remain the same.

Filter
The function of filter is to filter the data we want from an array. Suppose we have an array.
const numbers = [1, 2, 3, 4, false, '', NaN, 5, 6];

We want to remove all falsy values ​​from here and only take truthy values. In that case we have to use filter method.
const filteredArr = numbers.filter((v) => v);
console.log(filteredArr);


In this case all truthy values ​​will be returned. But there will be some situations when I want truthy value but can't return two before v !! I will get the truthy value only if I install it.

Reduce
Let's look at the example below.
const numbers = [1, 2, 3, 4, false, '', NaN, 5, 6];
const filteredArr = numbers.filter((v) => v);
const strs = filteredArr.map((v) => v.toString());
console.log(strs);

There are some problems with this. It is traversed n number of times while filtering. Again while mapping is still traversing. This increases the time complexity. It can also be chained.
const numbers = [1, 2, 3, 4, false, '', NaN, 5, 6];
const filteredArr = numbers.filter((v) => v).map((v) => v.toString());
console.log(strs);

Object Deep Drive

Object Operations
Function vs Method
Object as a Data Structure

Array Operations
Object Over Array
Table of Contents